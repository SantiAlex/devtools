#!/bin/sh
export GOARCH=amd64
SNAPPY_HOST=snappy-vm

show_help() {
    echo "Usage: refresh-bits [OPTIONS] COMMAND..."
    echo
    echo "NOTE: The following options require particular SSH config (see README.md)"
    echo
    echo "Use a local virtual machine:"
    echo "    --pc:       Modern Intel/AMD Computer (64 bit)"
    echo "    --i386:     Legacy Intel/AMD Computer (32 bit)"
    echo "Use a remote physical machine:"
    echo "    --pi2:      Raspberry Pi 2"
    echo "    --dragon:   410c DragonBoard"
    echo "    --bbb:      Baglebone Black"
    echo
    echo "Use a custom remote machine:"
    echo "    --host HOST Connect to the given host"
    echo "    --arm       Cross-compile for modern 32bit ARM (ARMv7)"
    echo "    --aarch64   Cross-compile for 64bit ARM (Aarch64)"
    echo
    echo "Commands:"
    echo "    snap        Compile and copy 'snap'"
    echo "    snappy      Compile and copy 'snappy'"
    echo "    snapd       Compile and copy 'snapd'"
    echo "    setup       Stop 'snapd' running on the machine"
    echo "    run-snapd   Run copied 'snapd' (blocking)"
    echo
    echo "NOTE: Typical workflow looks like this:"
    echo "  console 1: use $EDITOR to hack on the code"
    echo "  console 2: run unit tests in a loop with entr(1)"
    echo "  console 3: run ./refresh-bits snap snapd setup run-snapd"
    echo "  console 4: use ssh to login to the target machine"
    echo "  console 5: (optionally) run run-devel-vm"
    echo
    echo "Move from console 1 through 2, 3 to 4 to experiment with snap and snapd."
    echo "In console 3 you can see diagnostic messages from snapd."
    echo
    echo "Good luck, happy hacking!"
}

if [ "$1" = "" ]; then
    show_help
    exit
fi

while [ "$1" != '' ]; do
    case "$1" in
        --help)
            show_help
            shift
            exit
            ;;
        --pc)
            SNAPPY_HOST=snappy-vm
            export GOARCH=amd64
            shift
            ;;
        --i386)
            SNAPPY_HOST=snappy-vm
            export GOARCH=i386
            shift
            ;;
        --pi2)
            SNAPPY_HOST=snappy-pi2
            export GOARCH=arm
            export GOARM=7
            export CGO_ENABLED=1
            export CC=arm-linux-gnueabihf-gcc
            shift
            ;;
        --dragon)
            SNAPPY_HOST=snappy-dragon
            export GOARCH=arm64
            export CGO_ENABLED=1
            export CC=aarch64-linux-gnu-gcc
            shift
            ;;
        --bbb)
            SNAPPY_HOST=snappy-bbb
            export GOARCH=arm
            export GOARM=7
            export CGO_ENABLED=1
            export CC=arm-linux-gnueabihf-gcc
            shift
            ;;
        --host)
            SNAPPY_HOST="$2"
            shift 2
            ;;
        --arm|--armv7)
            shift
            export GOARCH=arm
            export GOARM=7
            export CGO_ENABLED=1
            export CC=arm-linux-gnueabihf-gcc
            ;;
        --aarch64|--arm64)
            export GOARCH=arm64
            export CGO_ENABLED=1
            export CC=aarch64-linux-gnu-gcc
            shift
            ;;
        snap|snappy)
            echo "Building $1"
            go build -o "$1.$GOARCH" "github.com/ubuntu-core/snappy/cmd/$1" || exit 1
            echo "Copying $1 to target machine"
            scp "$1.$GOARCH" "$SNAPPY_HOST:$1" || exit 1
            shift
            ;;
        snapd)
            echo "Building $1"
            go build -o "$1.$GOARCH" "github.com/ubuntu-core/snappy/cmd/$1" || exit 1
            echo "Killing snapd on the target machine"
            ssh "$SNAPPY_HOST" sudo pkill -9 snapd || :
            echo "Copying $1 to target machine"
            scp "$1.$GOARCH" "$SNAPPY_HOST:$1" || exit 1
            shift
            ;;
        setup)
            echo "Disabling normal snap daemon..."
            ssh "$SNAPPY_HOST" sudo systemctl disable ubuntu-snappy.snapd.socket
            ssh "$SNAPPY_HOST" sudo systemctl disable ubuntu-snappy.snapd.service
            ssh "$SNAPPY_HOST" sudo systemctl stop ubuntu-snappy.snapd.socket
            ssh "$SNAPPY_HOST" sudo systemctl stop ubuntu-snappy.snapd.service
            echo "Killing any locally-started snapd"
            ssh "$SNAPPY_HOST" sudo pkill -9 snapd || :
            echo "Inspecting VM state"
            ssh "$SNAPPY_HOST" systemctl status ubuntu-snappy.snapd.socket ubuntu-snappy.snapd.service || :
            shift
            ;;
        run-snapd)
            echo "Running snapd (use sudo snap to talk to it)"
            ssh "$SNAPPY_HOST" sudo /lib/systemd/systemd-activate -l /run/snapd.socket ./snapd
            shift
            ;;
        *)
            echo "Unknown command: $1"
            exit 1
            ;;
    esac
done
