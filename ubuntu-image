#!/bin/sh

version="0.5"

# Handle command line arguments

while [ -n "$1" ]; do
    case "$1" in 
        --help|-h)
            echo "Usage: ubuntu-image [--developer-mode] [device name]"
            exit 0
            ;;
        --version)
            echo "ubuntu-image, version $version"
            exit 0
            ;;
        --developer-mode)
            developer_mode=yes
            shift
            ;;
        *)
            # Perhaps it is a device name?
            case $1 in
                bbb|pi2|pc|dragon)
                    device="$1"
                    shift
                    ;;
                *)
                    echo "Unrecognized argument: $1" 1>&1
                    exit 1
                    ;;
            esac
            ;;
    esac
done

# Interactively ask about the device if necessary.

while [ -z "$device" ]; do
    echo "Which device do you have?"
    echo
    echo "Devices supported by Canonical (official)"
    echo " pc:     Generic PC (x86-64 Intel or AMD)"
    echo " pi2:    Raspberry Pi 2"
    echo
    echo "Community devices"
    echo " bbb:    BeagleBone Black"
    echo " dragon: 410c DragonBoard"
    echo
    echo -n "device> "
    read device 
    case "$device" in
        bbb|pi2|pc|dragon)
            ;;
        *)
            echo "Unrecognized device name: $device"
            device=""
            ;;
    esac
done

# Re-affirm the user as to which device is seleced 

echo "Selected device: $device"

# Pick the right values for ubuntu-device-flash

channel=edge
os=ubuntu-core.canonical
udf_url=http://people.canonical.com/~mvo/all-snaps/ubuntu-device-flash
udf_hash=d8acf6b199a0a73def00dd61302afc99718cee101ec0c8d2ef845168ca9b5820ed943e90f17a6d743ee368b2337f956765670f4128210dca7df71501035f7391
case $device in
    pi2)
        kernel=canonical-pi2-linux.canonical
        gadget=canonical-pi2.canonical
        ;;
    bbb)
        kernel=linux-armhf.mvo
        gadget=beagleblack.mvo
        ;;
    pc)
        kernel=canonical-pc-linux.canonical
        gadget=canonical-pc.canonical
        ;;
    dragon)
        os_url=http://people.canonical.com/~ogra/snappy/all-snaps/dragonboard/ubuntu-core-arm64_16.04.0-2_arm64.snap
        os_hash=9949d337a219b706e56253c4c89df1293ae6e1d14909677208a14fab9c40c27c72937bab93d0b863b064b167d7844358d0be344e7ba1aa9ad2945fc99490abc9
        kernel_url=http://people.canonical.com/~ogra/snappy/all-snaps/dragonboard/canonical-dragon-linux_4.2.0-2012-generic-dragon410c_arm64.snap
        kernel_hash=85fc75d0f1042ef988c070a0f10127044107e96a5e15ebaead66371c85f96b7ed44b2953bb22011f2cc99f07700e0f3d634f6229379190ab7ddaf0d3de8e74e4
        gadget_url=http://people.canonical.com/~ogra/snappy/all-snaps/dragonboard/canonical-dragon_0.6_all.snap
        gadget_hash=e9d33cda70f8384c0ec31e4822a6ed457c98ca7ce6682b93875390507903413a04d81e9a8c8966c32d2d32865f56e789be3cf25f8a66b1f1658b8fa4f8c443fe
        ;;
    *)
        echo "BUG: no information how to build an image for device: $device"
        exit 2
        ;;
esac

cache_dir="${XDG_CACHE_HOME:-$HOME/.cache}/ubuntu-image"

download() {
    blob_url="$1"
    blob_hash="$2"
    msg="$3"
    if [ -f "$cache_dir/blob.$blob_hash" ]; then
        cached_blob_hash=$(sha512sum < "$cache_dir/blob.$blob_hash" | cut -f 1 -d ' ')
        if [ "$cached_blob_hash" != "$blob_hash" ]; then
            echo "Removing corrupted copy of $(basename $blob_url)"
            rm -f "$cache_dir/blob.$blob_hash"
        else
            return
        fi
    fi
    if [ -z "$msg" ]; then
        echo "Downloading $blob_url..."
    else
        echo "$msg"
    fi
    blob_download_fname=$(tempfile --prefix=blob-)
    trap "rm -f $blob_download_fname" EXIT
    if ! wget --quiet --user-agent="ubuntu-image/$version" --output-document="$blob_download_fname" "$blob_url"; then
        echo "Failed to download $blob_url"
        exit 1
    fi
    blob_download_hash=$(sha512sum < "$blob_download_fname" | cut -f 1 -d ' ')
    if [ "$blob_download_hash" != "$blob_hash" ]; then
        echo "Failed to verify integrity of $blob_url"
        exit 1
    fi
    mkdir -p "$cache_dir"
    mv --no-clobber "$blob_download_fname" "$cache_dir/blob.$blob_hash"
}

# Download and verify integrity of ubuntu-device-flash

if [ -n "$udf_url" ]; then
    download "$udf_url" "$udf_hash" "Downloading ubuntu-device-flash..."
    udf="$cache_dir/blob.$udf_hash"
    chmod +x "$udf"
fi

# Download snaps that are not published in the store

if [ -n "$os_url" ]; then
    download "$os_url" "$os_hash" "Downloading OS snap..."
    os="$cache_dir/blob.$os_hash"
fi
if [ -n "$kernel_url" ]; then
    download "$kernel_url" "$kernel_hash" "Downloading kernel snap..."
    kernel="$cache_dir/blob.$kernel_hash"
fi
if [ -n "$gadget_url" ]; then
    download "$gadget_url" "$gadget_hash" "Downloading gadget snap..."
    gadget="$cache_dir/blob.$gadget_hash"
fi

test -z "$os" && echo "BUG: no OS snap for device: $device" && exit 2
test -z "$kernel" && echo "BUG: no kernel snap for device: $device" && exit 2
test -z "$gadget" && echo "BUG: no gadget snap for device: $device" && exit 2

# Run ubuntu device flash

echo "Building image..."

exec sudo "$udf" core rolling \
    --channel "$channel" --kernel "$kernel" --os "$os" --gadget "$gadget" \
    "$(test -n \"$developer_mode\" && echo --developer-mode)" \
    -o "$device.img"
